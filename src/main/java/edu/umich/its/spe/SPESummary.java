package edu.umich.its.spe;

/*
 * Store summary of processing information for distribution.
 * Include the grade retrieval dates (stored, used, and new),
 * users processed (with error status) and elapsed time.
 * 
 * This doesn't replace logging.  It is to provide a report
 * suitable for distribution. The report is generated by toString.
 * 
 * Elapsed time is calculated based on when summary is created and when
 * the string version is created.
 */

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.tuple.Pair;
import org.springframework.stereotype.Component;
import org.apache.commons.lang3.time.DurationFormatUtils;

import lombok.Data;

@Component

@Data
public class SPESummary {
	
	private LocalDateTime startTime = LocalDateTime.now();
	private LocalDateTime endTime;
	
	// record grade retrieval timestamps for stored value, used value, 
	// and new value to be stored for next time.
	// String is a suitable format since these are only use in the report.
	private String storedGradesLastRetrieved = new String();
	private String useGradesLastRetrieved = new String();
	private String updatedGradesLastRetrieved  = new String();
	
	// id of the canvas course used as grade source
	private String courseId = new String();
	
	// Keep list of use names and processing success.
	private List<Pair<String, Boolean>> users  = new ArrayList<Pair<String,Boolean>>();
	private int added = 0;
	private int errors = 0;
	
	public SPESummary appendUser(String name,Boolean success) {
		// add user and update counts.
		users.add(Pair.of(name,success));
		if (success) {
			added++;
		} else {
			errors++;
		};
		return this;
	}
	
	public String toString() {
		
		// automatically set the end time to time when generate report string.

		endTime = LocalDateTime.now();
		StringBuffer result = new StringBuffer();
		
		 Duration dur = Duration.between(startTime, endTime);
		 
		 //System.out.println("start: "+startTime+" end: "+endTime+" duration: "+DurationFormatUtils.formatDurationHMS(dur.toMillis()));
		
		result.append("starting time: ").append(SPEMaster.formatTimestamp(startTime)).append("\n");
		result.append("end time: ").append(SPEMaster.formatTimestamp(endTime)).append("\n");
		result.append("elapsed time: ").append(DurationFormatUtils.formatDurationHMS(dur.toMillis())).append("\n");
		
		result.append("storedGradesLastRetrieved: ").append(storedGradesLastRetrieved.toString()).append("\n");
		result.append("useGradesLastRetrieved: ").append(useGradesLastRetrieved.toString()).append("\n");
		result.append("updatedGradesLastRetrieved: ").append(updatedGradesLastRetrieved.toString()).append("\n");
		
		result.append("courseId: ").append(courseId.toString()).append("\n");
		
		result.append("users added: ").append(added).append(" errors: ").append(errors).append("\n");
		
		users.forEach((u) -> result.append("user: ").append(u.getLeft())
				.append(" success: ").append(u.getRight())
				.append("\n"));
		
		return result.toString();
	}
	
}
