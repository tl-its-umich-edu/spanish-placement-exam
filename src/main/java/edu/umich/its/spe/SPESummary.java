package edu.umich.its.spe;

/*
 * Store summary of processing information for distribution.
 * Include the grade retrieval dates (stored, used, and new),
 * users processed (with error status) and elapsed time.
 *
 * This doesn't replace logging.  It is to provide a report
 * suitable for distribution. The report is generated by toString.
 *
 * Elapsed time is calculated based on when summary is created and when
 * the string version is created.
 */

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.tuple.Pair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.apache.commons.lang3.time.DurationFormatUtils;

import lombok.Data;

@Component

@Data
public class SPESummary {

	static final Logger M_log = LoggerFactory.getLogger(SPEMaster.class);

	private static final String LINE_RETURN = "\n";

	private LocalDateTime startTime = LocalDateTime.now();
	private LocalDateTime endTime;

	// record grade retrieval timestamps for the value that was already stored,
	// the (computed) value that was used, and the value to be stored for next time.
	// String is a suitable format since these are only used in the report.

	private String storedGradesLastRetrieved = new String();
	private String useGradesLastRetrieved = new String();
	private String updatedGradesLastRetrieved  = new String();

	// id of the canvas course used as grade source
	private String courseId = new String();

	// Keep list of user names and processing success.
	private List<Pair<String, Boolean>> users  = new ArrayList<Pair<String,Boolean>>();
	private int added = 0;
	private int errors = 0;

	public SPESummary appendUser(String name,Boolean success) {
		// add user and update counts.
		users.add(Pair.of(name,success));
		if (success) {
			added++;
		} else {
			errors++;
		};

		return this;
	}

	public String toString() {

		// automatically set the end time to time when generate report string.

		endTime = LocalDateTime.now();
		StringBuffer result = new StringBuffer();

		Duration dur = Duration.between(startTime, endTime);

		// make sure there is a printable value even if no course id (when testing).
		String courseIdString = courseId.toString().length() > 0 ? courseId.toString() : "[none]";

		result.append(LINE_RETURN);
		result.append(LINE_RETURN);
		result.append("starting time: ").append(PersistTimestamp.formatTimestamp(startTime)).append(LINE_RETURN);
		result.append("end time: ").append(PersistTimestamp.formatTimestamp(endTime)).append(LINE_RETURN);
		result.append("elapsed time: ").append(DurationFormatUtils.formatDurationHMS(dur.toMillis())).append(LINE_RETURN);
		result.append(LINE_RETURN);

		result.append("storedGradesLastRetrieved: ").append(storedGradesLastRetrieved.toString()).append(LINE_RETURN);
		result.append("useGradesLastRetrieved: ").append(useGradesLastRetrieved.toString()).append(LINE_RETURN);
		result.append("updatedGradesLastRetrieved: ").append(updatedGradesLastRetrieved.toString()).append(LINE_RETURN);
		result.append(LINE_RETURN);

		result.append("courseId: ").append(courseIdString).append(LINE_RETURN);
		result.append(LINE_RETURN);

		result.append("users added: ").append(added).append(" errors: ").append(errors).append(LINE_RETURN);
		result.append(LINE_RETURN);

		users.forEach((u) -> result
				.append("user: ").append(u.getLeft())
				.append(" success: ").append(u.getRight())
				.append(LINE_RETURN));

		return result.toString();
	}

}
